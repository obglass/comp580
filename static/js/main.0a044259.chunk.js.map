{"version":3,"sources":["serviceWorker.js","Table.js","Home.js","Navigation.js","MissingNumberGame.js","CompleteTableGame.js","AppControl.js","index.js"],"names":["Boolean","window","location","hostname","match","Table","props","createTable","table","i","state","rowVal","children","j","colVal","push","id","handleRowChange","bind","handleColChange","event","this","setState","target","value","type","onChange","Component","Home","class","Navigation","Navbar","bg","variant","to","MissingNumberGame","makeRandom","rand","Math","floor","random","ref","btn","onClick","promptAnswer","myGuess","prompt","alert","toString","setAttribute","userGuess","handleUserGuess","renderBool","nextProps","nextState","text-align","CompleteTableGame","makeMissingNumbers","colNum","parseInt","area","above","below","left","right","caption","btnA","promptAnswerAbove","btnB","promptAnswerBelow","btnL","promptAnswerLeft","btnR","promptAnswerRight","aboveCorrect","belowCorrect","leftCorrect","rightCorrect","AppControl","path","component","exact","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.0a044259.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === \"localhost\" ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === \"[::1]\" ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener(\"load\", () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            \"This web app is being served cache-first by a service \" +\r\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === \"installed\") {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                \"New content is available and will be used when all \" +\r\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log(\"Content is cached for offline use.\");\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error(\"Error during service worker registration:\", error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { \"Service-Worker\": \"script\" }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get(\"content-type\");\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        \"No internet connection found. App is running in offline mode.\"\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if (\"serviceWorker\" in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport \"./App.css\";\r\nimport { Component } from \"react\";\r\n\r\nclass Table extends Component {\r\n  constructor(props) {\r\n    super(props); //since we are extending class Table so we have to use super in order to override Component class constructor\r\n\r\n    this.state = {\r\n      rowVal: 10,\r\n      colVal: 10\r\n    };\r\n    this.handleRowChange = this.handleRowChange.bind(this);\r\n    this.handleColChange = this.handleColChange.bind(this);\r\n  }\r\n\r\n  handleRowChange(event) {\r\n    this.setState({ rowVal: event.target.value });\r\n  }\r\n  handleColChange(event) {\r\n    this.setState({ colVal: event.target.value });\r\n  }\r\n\r\n  createTable = () => {\r\n    let table = [];\r\n\r\n    for (let i = 0; i < this.state.rowVal; i++) {\r\n      let children = [];\r\n      for (let j = 1; j < this.state.colVal + 1; j++) {\r\n        if (j <= this.state.colVal) {\r\n          children.push(<td id=\"cell\">{this.state.colVal * i + j}</td>);\r\n        }\r\n      }\r\n      table.push(<tr id=\"indRow\">{children}</tr>);\r\n    }\r\n    return table;\r\n  };\r\n\r\n  render() {\r\n    //Whenever our class runs, render method will be called automatically, it may have already defined in the constructor behind the scene.\r\n    return (\r\n      <div id=\"outer-div\">\r\n        <div id=\"inner-div\">\r\n          <table>\r\n            <caption id=\"title\">Hundreds Chart</caption>\r\n            {this.createTable()}\r\n          </table>\r\n\r\n          <label>\r\n            Rows:{\" \"}\r\n            <input\r\n              type=\"text\"\r\n              value={this.state.rowVal}\r\n              onChange={this.handleRowChange}\r\n            />{\" \"}\r\n          </label>\r\n          <label>\r\n            Columns:{\" \"}\r\n            <input\r\n              type=\"text\"\r\n              value={this.state.colVal}\r\n              onChange={this.handleColChange}\r\n            />\r\n          </label>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Table;\r\n","import React from \"react\";\r\n\r\nconst Home = () => {\r\n  return (\r\n    <div class=\"instructions\">\r\n      <h1>Instructions for How to Play the Games</h1>\r\n      <h2>Table</h2>\r\n      <ul>\r\n        <li>The table is a hundreds chart that defaults to 10 rows and 10 columns.</li>\r\n        <li>There are input boxes at the bottom of the screen if you wish to change the size of the table.</li>\r\n        <li>The purpose of the table is to get used to how to use the chart.</li>\r\n        <li>Make sure you set Rotor to rows.</li>\r\n        <li>Listen for the earcon that signifies the end of a row.</li>\r\n        <li>You may then drag your finger over the chart or use swipe gestures.</li>\r\n        \r\n      </ul>\r\n\r\n      <h2>Missing Number Game</h2>\r\n      <ul>\r\n        <li>This game is a hundreds chart that has a missing number and you must figure out what it is.</li>\r\n       <li>Make sure you set Rotor to rows.</li>\r\n       <li>Move around the table until you find the cell that says question mark, which is the missing number.</li>\r\n       <li>The missing number is a button, so click on it to bring up a prompt box to enter your guess.</li>\r\n       <li>Input your guess and click OK to see if you are correct.</li>\r\n       <li>There is a New Game button at the bottom of the page if you wish to play again or start over.</li>\r\n      </ul>\r\n     \r\n      <h2>Complete the Table Game</h2>\r\n      <ul>\r\n        <li>This game has 2, 3, or 4 missing numbers and you must figure out what they are.</li>\r\n        <li>The missing numbers appear around a central number.</li>\r\n       <li> If you get stuck, try to add 1, subtract 1, add 10, and subtract 10 from the middle number to get the missing numbers.</li>\r\n       <li>Move your finger around the grid until you find question mark, which is the missing number.</li>\r\n      <li>Double click the button to pull up the prompt box to input your guess.</li>\r\n      <li>Input your guess and click OK to see if you are correct.</li>\r\n      <li>If your guess is correct, the button will become inactive and if you go to it, it will say \"dimmed button\". This means you have already found this missing number. </li>\r\n      <li>Keep going until you find all the missing numbers.</li>\r\n      <li>There is a New Game button at the bottom of the page if you wish to play again or start over.</li>\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","import React from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport { Navbar } from \"react-bootstrap\";\r\nimport \"./App.css\";\r\n\r\nconst Navigation = () => {\r\n  return (\r\n    <Navbar bg=\"dark\" variant=\"dark\" id=\"navbar\">\r\n      <NavLink id=\"nav\" to=\"/\">\r\n        Home\r\n      </NavLink>\r\n      <NavLink id=\"nav\" to=\"/table\">\r\n        Table\r\n      </NavLink>\r\n      <NavLink id=\"nav\" to=\"/missingnumbergame\">\r\n        Missing Number Game\r\n      </NavLink>\r\n      <NavLink id=\"nav\" to=\"/completetablegame\">\r\n        Complete the Table Game\r\n      </NavLink>\r\n    </Navbar>\r\n  );\r\n};\r\n\r\nexport default Navigation;\r\n","import React from \"react\";\r\nimport \"./App.css\";\r\nimport { Component } from \"react\";\r\n// import { NavLink } from \"react-bootstrap\";\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\nclass MissingNumberGame extends Component {\r\n  constructor(props) {\r\n    super(props); //since we are extending class Table so we have to use super in order to override Component class constructor\r\n\r\n    this.state = {\r\n      rowVal: 10,\r\n      colVal: 10,\r\n      userGuess: null\r\n    };\r\n    this.handleRowChange = this.handleRowChange.bind(this);\r\n    this.handleColChange = this.handleColChange.bind(this);\r\n    this.handleUserGuess = this.handleUserGuess.bind(this);\r\n    //this.handleSubmit = this.handleSubmit.bind(this);\r\n    // this.handleRandom = this.handleRandom.bind(this);\r\n    this.promptAnswer = this.promptAnswer.bind(this);\r\n    this.rand = 0;\r\n    this.renderBool = true;\r\n  }\r\n\r\n  handleRowChange(event) {\r\n    this.setState({ rowVal: event.target.value });\r\n  }\r\n  handleColChange(event) {\r\n    this.setState({ colVal: event.target.value });\r\n  }\r\n\r\n  handleUserGuess(event) {\r\n    this.renderBool = false;\r\n    this.setState({ userGuess: event.target.value });\r\n    // event.preventDefault();\r\n  }\r\n\r\n  shouldComponentUpdate(nextProps, nextState) {\r\n    if (this.renderBool === false) {\r\n      return false;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  makeRandom = () => {\r\n    this.rand = Math.floor(\r\n      Math.random() * (this.state.rowVal * this.state.colVal) + 1\r\n    );\r\n  };\r\n\r\n  createTable = () => {\r\n    let table = [];\r\n\r\n    for (let i = 0; i < this.state.rowVal; i++) {\r\n      let children = [];\r\n      for (let j = 1; j < this.state.colVal + 1; j++) {\r\n        if (j <= this.state.colVal) {\r\n          if (this.state.colVal * i + j === this.rand) {\r\n            children.push(\r\n              <td id=\"cell\" class=\"missingNumber\">\r\n                <button\r\n                  ref={btn => {\r\n                    this.btn = btn;\r\n                  }}\r\n                  onClick={this.promptAnswer}\r\n                >\r\n                  ?\r\n                </button>\r\n              </td>\r\n            );\r\n          } else {\r\n            children.push(<td id=\"cell\">{this.state.colVal * i + j}</td>);\r\n          }\r\n        }\r\n      }\r\n      table.push(<tr id=\"indRow\">{children}</tr>);\r\n    }\r\n    return table;\r\n  };\r\n\r\n  promptAnswer = () => {\r\n    var myGuess = prompt(\"Enter the missing number\");\r\n    if (myGuess == null) {\r\n      alert(\"You did not submit a guess.\");\r\n    } else {\r\n      if (myGuess === this.rand.toString()) {\r\n        alert(\"Congrats, \" + myGuess + \" is the missing number!\");\r\n        this.btn.setAttribute(\"disabled\", \"disabled\");\r\n      } else {\r\n        if (myGuess === \"\") {\r\n          alert(\"You did not enter a number.\");\r\n        } else {\r\n          alert(\"Sorry, \" + myGuess + \" is not the missing number. Try again.\");\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  render() {\r\n    //Whenever our class runs, render method will be called automatically, it may have already defined in the constructor behind the scene.\r\n    return (\r\n      <div id=\"outer-div\">\r\n        <div id=\"inner-div\">\r\n          <table>\r\n            <caption id=\"title\">Find the Missing Number</caption>\r\n            {this.makeRandom()}\r\n            {this.createTable()}\r\n          </table>\r\n\r\n          <div class=\"newGame\">\r\n            <td class=\"newGameBtn\" text-align=\"center\">\r\n              {/* <a href=\"/missingnumbergame\" class=\"newGameTxt\">\r\n                NEW GAME\r\n              </a> */}\r\n              <NavLink id=\"newGame\" to=\"/missingnumbergame\">\r\n                NEW GAME\r\n              </NavLink>\r\n            </td>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MissingNumberGame;\r\n","import React from \"react\";\r\nimport \"./App.css\";\r\nimport { Component } from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\n/* can probably extend Table and add code to it, instead of copying it all */\r\nclass CompleteTableGame extends Component {\r\n  constructor(props) {\r\n    super(props); //since we are extending class Table so we have to use super in order to override Component class constructor\r\n\r\n    this.state = {\r\n      rowVal: 10,\r\n      colVal: 10\r\n      //userGuessAbove: null,\r\n      // userGuessBelow: null,\r\n      //userGuessRight: null,\r\n      // userGuessLeft: null\r\n    };\r\n\r\n    this.handleRowChange = this.handleRowChange.bind(this);\r\n    this.handleColChange = this.handleColChange.bind(this);\r\n    this.rand = 0;\r\n    this.above = 0;\r\n    this.below = 0;\r\n    this.left = 0;\r\n    this.right = 0;\r\n    this.renderBool = true;\r\n\r\n    this.aboveCorrect = false;\r\n    this.belowCorrect = false;\r\n    this.leftCorrect = false;\r\n    this.rightCorrect = false;\r\n  }\r\n\r\n  handleRowChange(event) {\r\n    this.setState({ rowVal: event.target.value });\r\n  }\r\n  handleColChange(event) {\r\n    this.setState({ colVal: event.target.value });\r\n  }\r\n\r\n  /*handleUserGuessAbove(event) {\r\n    this.renderBool = false;\r\n    this.setState({ userGuessAbove: event.target.value });\r\n    // event.preventDefault();\r\n  }\r\n  handleUserGuessBelow(event) {\r\n    this.renderBool = false;\r\n    this.setState({ userGuessBelow: event.target.value });\r\n    // event.preventDefault();\r\n  }\r\n  handleUserGuessLeft(event) {\r\n    this.renderBool = false;\r\n    this.setState({ userGuessLeft: event.target.value });\r\n    // event.preventDefault();\r\n  }\r\n  handleUserGuessRight(event) {\r\n    this.renderBool = false;\r\n    this.setState({ userGuessRight: event.target.value });\r\n    // event.preventDefault();\r\n  }\r\n\r\n  /*handleSubmit(event) {\r\n    var userGuessAboveNum = parseInt(this.state.userGuessAbove, 10);\r\n    var userGuessBelowNum = parseInt(this.state.userGuessBelow, 10);\r\n    var userGuessLeftNum = parseInt(this.state.userGuessLeft, 10);\r\n    var userGuessRightNum = parseInt(this.state.userGuessRight, 10);\r\n\r\n    if (userGuessAboveNum === this.above) {\r\n      alert(\"Congrats! Your Guess:\" + this.state.userGuessAbove);\r\n      this.aboveCorrect = true;\r\n    } else {\r\n      this.aboveCorrect = false;\r\n    }\r\n    if (userGuessBelowNum === this.below) {\r\n      alert(\"Congrats! Your Guess:\" + this.state.userGuessBelow);\r\n      this.belowCorrect = true;\r\n    } else {\r\n      this.belowCorrect = false;\r\n    }\r\n    if (userGuessLeftNum === this.left) {\r\n      alert(\"Congrats! Your Guess:\" + this.state.userGuessLeft);\r\n      this.leftCorrect = true;\r\n    } else {\r\n      this.leftCorrect = false;\r\n    }\r\n    if (userGuessRightNum === this.right) {\r\n      alert(\"Congrats! Your Guess:\" + this.state.userGuessRight);\r\n      this.rightCorrect = true;\r\n    } else {\r\n      this.rightCorrect = false;\r\n    }\r\n    if (\r\n      this.aboveCorrect |\r\n      this.belowCorrect |\r\n      this.leftCorrect |\r\n      this.rightCorrect\r\n    ) {\r\n      alert(\"Try again. You have one or more answers incorrect.\");\r\n    }\r\n\r\n    // document.write(this.rand);\r\n    // document.write(this.state.userGuess);\r\n    event.preventDefault();\r\n  }*/\r\n\r\n  shouldComponentUpdate(nextProps, nextState) {\r\n    if (this.renderBool === false) {\r\n      return false;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  makeRandom = () => {\r\n    this.rand = Math.floor(\r\n      Math.random() * (this.state.rowVal * this.state.colVal) + 1\r\n    );\r\n  };\r\n\r\n  makeMissingNumbers = () => {\r\n    var colNum = parseInt(this.state.colVal, 10);\r\n    var rowNum = parseInt(this.state.rowVal, 10);\r\n    var area = colNum * rowNum;\r\n\r\n    this.above = this.rand - colNum;\r\n    this.below = this.rand + colNum;\r\n    this.left = this.rand - 1;\r\n    this.right = this.rand + 1;\r\n\r\n    if ((this.above === null) | (this.above < 1) | (this.above > area)) {\r\n      this.above = 0;\r\n    }\r\n    if ((this.below === null) | (this.below < 1) | (this.below > area)) {\r\n      this.below = 0;\r\n    }\r\n    if ((this.left === null) | (this.left < 1) | (this.left > area)) {\r\n      this.left = 0;\r\n    }\r\n    if ((this.right === null) | (this.right < 1) | (this.right > area)) {\r\n      this.right = 0;\r\n    }\r\n    // takes out right ? for random number on right edge- DO WE WANT THIS\r\n    if (this.rand % colNum === 0) {\r\n      this.right = 0;\r\n    }\r\n    // takes out left ? for random number on left edge\r\n    if (this.left % colNum === 0) {\r\n      this.left = 0;\r\n    }\r\n\r\n    // alert(\r\n    //   this.rand +\r\n    //     \"00\" +\r\n    //     this.above +\r\n    //     \"00\" +\r\n    //     this.below +\r\n    //     \"00\" +\r\n    //     this.left +\r\n    //     \"00\" +\r\n    //     this.right\r\n    // );\r\n    // this.push(this.rand);\r\n    // this.push(this.above);\r\n    // this.push(this.below);\r\n    // this.push(this.left);\r\n    // this.push(this.right);\r\n  };\r\n\r\n  createTable = () => {\r\n    let table = [];\r\n\r\n    var colNum = parseInt(this.state.colVal, 10);\r\n\r\n    for (let i = 0; i < this.state.rowVal; i++) {\r\n      let children = [];\r\n      for (let j = 1; j < this.state.colVal + 1; j++) {\r\n        if (j <= this.state.colVal) {\r\n          if (colNum * i + j === this.above) {\r\n            children.push(\r\n              <td id=\"cell\" caption=\"missing number\" class=\"missingNumber\">\r\n                <button\r\n                  ref={btnA => {\r\n                    this.btnA = btnA;\r\n                  }}\r\n                  id=\"above\"\r\n                  onClick={this.promptAnswerAbove}\r\n                >\r\n                  ?\r\n                </button>\r\n              </td>\r\n            );\r\n          } else if (colNum * i + j === this.below) {\r\n            children.push(\r\n              <td id=\"cell\" caption=\"missing number\" class=\"missingNumber\">\r\n                <button\r\n                  ref={btnB => {\r\n                    this.btnB = btnB;\r\n                  }}\r\n                  class=\"below\"\r\n                  onClick={this.promptAnswerBelow}\r\n                >\r\n                  ?\r\n                </button>\r\n              </td>\r\n            );\r\n          } else if (colNum * i + j === this.left) {\r\n            children.push(\r\n              <td id=\"cell\" caption=\"missing number\" class=\"missingNumber\">\r\n                <button\r\n                  ref={btnL => {\r\n                    this.btnL = btnL;\r\n                  }}\r\n                  class=\"left\"\r\n                  onClick={this.promptAnswerLeft}\r\n                >\r\n                  ?\r\n                </button>\r\n              </td>\r\n            );\r\n          } else if (colNum * i + j === this.right) {\r\n            children.push(\r\n              <td id=\"cell\" caption=\"missing number\" class=\"missingNumber\">\r\n                <button\r\n                  ref={btnR => {\r\n                    this.btnR = btnR;\r\n                  }}\r\n                  class=\"right\"\r\n                  onClick={this.promptAnswerRight}\r\n                >\r\n                  ?\r\n                </button>\r\n              </td>\r\n            );\r\n          } else {\r\n            children.push(<td id=\"cell\">{colNum * i + j}</td>);\r\n          }\r\n        }\r\n      }\r\n      table.push(<tr id=\"indRow\">{children}</tr>);\r\n    }\r\n    //this.renderBool=false;\r\n    return table;\r\n  };\r\n\r\n  promptAnswerAbove = () => {\r\n    var myGuess = prompt(\"Enter the missing number\");\r\n    if (myGuess == null) {\r\n      alert(\"You did not submit a guess.\");\r\n    } else {\r\n      if (myGuess === this.above.toString()) {\r\n        alert(\"Congrats, \" + myGuess + \" is this missing number!\");\r\n        // this.setState({above:myGuess});\r\n        this.btnA.setAttribute(\"disabled\", \"disabled\");\r\n        //this.btn.style();\r\n        //this.btn.textContent(this.btn.data(\"text-swap\"));\r\n      } else {\r\n        if (myGuess === \"\") {\r\n          alert(\"You did not enter a number.\");\r\n        } else {\r\n          alert(\r\n            \"Sorry, \" + myGuess + \" is not this missing number. Try again.\"\r\n          );\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  promptAnswerBelow = () => {\r\n    var myGuess = prompt(\"Enter the missing number\");\r\n    if (myGuess == null) {\r\n      alert(\"You did not submit a guess.\");\r\n    } else {\r\n      if (myGuess === this.below.toString()) {\r\n        alert(\"Congrats, \" + myGuess + \" is this missing number!\");\r\n        this.btnB.setAttribute(\"disabled\", \"disabled\");\r\n      } else {\r\n        if (myGuess === \"\") {\r\n          alert(\"You did not enter a number.\");\r\n        } else {\r\n          alert(\r\n            \"Sorry, \" + myGuess + \" is not this missing number. Try again.\"\r\n          );\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  promptAnswerLeft = () => {\r\n    var myGuess = prompt(\"Enter the missing number\");\r\n    if (myGuess == null) {\r\n      alert(\"You did not submit a guess.\");\r\n    } else {\r\n      if (myGuess === this.left.toString()) {\r\n        alert(\"Congrats, \" + myGuess + \" is this missing number!\");\r\n        this.btnL.setAttribute(\"disabled\", \"disabled\");\r\n      } else {\r\n        if (myGuess === \"\") {\r\n          alert(\"You did not enter a number.\");\r\n        } else {\r\n          alert(\r\n            \"Sorry, \" + myGuess + \" is not this missing number. Try again.\"\r\n          );\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  promptAnswerRight = () => {\r\n    var myGuess = prompt(\"Enter the missing number\");\r\n    if (myGuess == null) {\r\n      alert(\"You did not submit a guess.\");\r\n    } else {\r\n      if (myGuess === this.right.toString()) {\r\n        alert(\"Congrats, \" + myGuess + \" is this missing number!\");\r\n        this.btnR.setAttribute(\"disabled\", \"disabled\");\r\n      } else {\r\n        if (myGuess === \"\") {\r\n          alert(\"You did not enter a number.\");\r\n        } else {\r\n          alert(\r\n            \"Sorry, \" + myGuess + \" is not this missing number. Try again.\"\r\n          );\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  render() {\r\n    //Whenever our class runs, render method will be called automatically, it may have already defined in the constructor behind the scene.\r\n    return (\r\n      <div id=\"outer-div\">\r\n        <div id=\"inner-div\">\r\n          <table>\r\n            <caption id=\"title\">Find the Missing Numbers</caption>\r\n            {this.makeRandom()}\r\n            {this.makeMissingNumbers()}\r\n            {/* <label>{this.rand + \"00\"}</label>\r\n            <label>{this.above + \"00\"}</label>\r\n            <label>{this.below + \"00\"}</label>\r\n            <label>{this.left + \"00\"}</label>\r\n            <label>{this.right + \"00\"}</label> */}\r\n            {this.createTable()}\r\n          </table>\r\n\r\n          <div class=\"newGame\">\r\n            <td class=\"newGameBtn\" text-align=\"center\">\r\n              {/* <a href=\"\\completetablegame\" class=\"newGameTxt\">NEW GAME</a> */}\r\n              <NavLink id=\"newGame\" to=\"/completetablegame\">\r\n                NEW GAME\r\n              </NavLink>\r\n            </td>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default CompleteTableGame;\r\n","import React, { Component } from \"react\";\r\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\r\n\r\nimport Table from \"./Table\";\r\nimport Home from \"./Home\";\r\nimport Error from \"./Error\";\r\nimport Navigation from \"./Navigation\";\r\nimport MissingNumberGame from \"./MissingNumberGame\";\r\nimport CompleteTableGame from \"./CompleteTableGame\";\r\n\r\nclass AppControl extends Component {\r\n  render() {\r\n    return (\r\n      <BrowserRouter>\r\n        <div>\r\n          <Navigation />\r\n          <Switch>\r\n            <Route path=\"/\" component={Home} exact />\r\n            <Route path=\"/table\" component={Table} />\r\n            <Route path=\"/missingnumbergame\" component={MissingNumberGame} />\r\n            <Route path=\"/completetablegame\" component={CompleteTableGame} />\r\n            <Route component={Home} />\r\n          </Switch>\r\n        </div>\r\n      </BrowserRouter>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AppControl;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport AppControl from \"./AppControl\";\r\n\r\n  ReactDOM.render(<AppControl />, document.getElementById(\"root\"));\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}